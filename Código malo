import java.util.Objects;

// 1. Clase de Dominio para agrupar los datos de la reserva de forma clara
final class ReservationData {
    private final String user;
    private final UserType userType;
    private final String parkingSpot;
    private final String time;

    public ReservationData(String user, UserType userType, String parkingSpot, String time) {
        this.user = Objects.requireNonNull(user);
        this.userType = Objects.requireNonNull(userType);
        this.parkingSpot = Objects.requireNonNull(parkingSpot);
        this.time = Objects.requireNonNull(time);
    }

    public String getUser() { return user; }
    public UserType getUserType() { return userType; }
    public String getParkingSpot() { return parkingSpot; }
    public String getTime() { return time; }
}

// 2. Enum para evitar errores tipográficos en el tipo de usuario
enum UserType {
    ADMINISTRATIVE,
    PROFESSOR,
    STUDENT,
    GUEST,
    UNKNOWN
}

// 3. Servicio principal que maneja la lógica de negocio
public class ParkingService {

    // Método principal para realizar una reserva
    public String makeReservation(ReservationData data) {
        String confirmationMessage = "Reserva realizada";

        switch (data.getUserType()) {
            case ADMINISTRATIVE:
                return "Reserva prioritaria para " + data.getUser() + " en " + data.getParkingSpot() + " a las " + data.getTime() + "\n" + confirmationMessage;
            case PROFESSOR:
                return "Reserva de jornada completa para " + data.getUser() + " en " + data.getParkingSpot() + " de " + data.getTime() + "\n" + confirmationMessage;
            case STUDENT:
                return "Reserva con descuento para " + data.getUser() + " en " + data.getParkingSpot() + " a las " + data.getTime() + "\n" + confirmationMessage;
            case GUEST:
                return "Generar pase digital QR para " + data.getUser() + " en " + data.getParkingSpot() + "\n" + confirmationMessage;
            default:
                return "Tipo de usuario no válido";
        }
    }

    // 4. Método para cancelar una reserva con un retorno claro
    public boolean cancelReservation(String user, String parkingSpot) {
        System.out.println("Reserva cancelada para " + user + " en " + parkingSpot);
        return true; // Retorna 'true' para indicar éxito en la operación.
    }
}